(function () {
  var _c = document.getElementById('animator-canvas');
  // stores fragments
  var lib = {};
  // creates a fragment to write to
  function _types() {
  }
  // definition container for mode execution
  function _modes() {
  }
  // A definite span
  function _n(span){
    
  }
  class dots{
    constructor(opts) {
      this.name = opts.name || undefined,
      this.type = opts.type || 'html',
      this.mode = opts.mode || 'draw',
      this["shift(x)"] = opts["shift(x)"] || 0,
      this["shift(y)"] = opts["shift(x)"] || 0,
      this.index = opts.index || false;
      this.rx = opts.rx || null,
      this.ry = opts.ry || null,
      this.cx = opts.cx || null,
      this.cy = opts.cy || null,
      this.background = opts.background || 'black',
      this.border = opts.border || 'none',
      this.animations = opts.animations || null,
      this.events = opts.events || null
      // create type
      if (opts.type === "svg") {
        
      }     
      // set mode
      if (this.mode === 'brush') {
      } 
      else if (this.mode === 'draw') {
      } 
      else {
      }
      // initiate getter and setter;
      var val = null;
      if(opts.index === false){
        val = this.dots = opts;
      }
      else{
        val = this.dots = {
          index: opts.index,
          cx: opts.cx,
          cy: opts.cy,
          rx: opts.rx,
          ry: opts.ry
        }
      }
      // set coordinates
      this.coordinates = val || "Error while retrieving cartesian coordinates.";
      // draw dots
      this.draw;
    }
    // setter coordinates
    set dots(val) {
      // check for origin syntax
      if (typeof val.index === "number" || typeof val.index === "Number") {
        console.log(val);
      }
      else{
        
      }
    }
    // getter render
    get draw() {
      var _r = null
      lib[name] = _r;
    }
    // returns an array of cartesian positions
    algebra(equation, options) {

    }
    // returns a fragment for drawing on
    sheet(type) {
      if(type === "svg"){
        return xtag.createFragment("<svg></svg>");
      }
      else if(type === "html"){
        return document.createElement("div");
      }
      else{ console.log("The type prop of the 'dots' class must be 'svg' or 'html'."); }
    }
  }


  // horizon line
  var horizon_line = new dots( {
    name: 'horizon-1',
	id: '',
    type: 'svg',
    mode: 'draw',
    background: 'red',
    border: 'black 1px solid',
    units: "px",
    "%shift(x)": "2x",
    "%shift(f)": "0",
    "%x(0)": 49,
    "%f(x)": "2*x^2+(4.5x)+1",
    rx: 5,
    ry: 10,
    animations: {
      "@frame[intro]": {
        timeline: ".5m",
        path: {
          "0": [0,0],
          "1": [10,0],
          "2": [20,0],
          "3": [30,0]
        },
        effects: {
		  "": ""
		},
        rotate: {
		  "": ""
		}
      }
    },
    events: {
    }
  } );

}) ();